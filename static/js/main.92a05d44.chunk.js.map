{"version":3,"sources":["reducers/reducer.js","constants/initialCityList.js","store.js","components/Spinner/Spinner.js","components/ErrorElement/ErrorElement.js","utils/toCelsius.js","utils/weatherIcon.js","components/CityListItem/CityListItem.js","components/CityList/CityList.js","actions/actions.js","components/CityCard/CityCard.js","utils/toMRS.js","components/ModalCityCard/ModalCityCard.js","components/ServiceContext/ServiceContext.js","components/ErrorBoundary/ErrorBoundary.js","components/MainPage/MainPage.js","components/App/App.js","index.js","api/WeatherService.js","constants/apiKey.js"],"names":["initialState","error","isLoading","isModalOpened","cityList","city","trackingCities","reducer","state","action","console","log","type","payload","store","createStore","Spinner","Box","py","align","CircularProgress","ErrorElement","props","toCelsius","kelvin","Math","round","weatherIcon","id","CityListItem","ListItem","title","key","name","button","onClick","clickHandler","ListItemIcon","src","weather","icon","alt","ListItemText","primary","secondary","main","temp","mapDispatchToProps","openModalCity","data","connectWithStore","Content","onClickHandler","List","component","aria-label","map","CityCard","hPa","onCloseHandler","Container","maxWidth","disableGutters","Card","width","mx","CardMedia","image","CardContent","Typography","gutterBottom","variant","feels_like","color","description","toUpperCase","substring","wind","speed","pressure","CardActions","Button","size","useStyles","makeStyles","modal","display","alignItems","justifyContent","closeModalCity","classes","Modal","className","open","onClose","ServiceContext","React","createContext","ErrorBoundary","hasError","this","children","Component","fetchBookListRequest","fetchBookListSuccess","fetchBookListFailure","weatherService","useContext","useEffect","getData","then","catch","err","my","Paper","App","idArray","resArray","_getCity","Promise","all","url","apiKey","process","lang","adress","fetch","res","ok","json","Error","status","ReactDOM","render","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.92a05d44.chunk.js","sourcesContent":["import initialCityList from '../constants/initialCityList';\r\n\r\nconst initialState = {\r\n    error: null,\r\n    isLoading: true,\r\n    isModalOpened: false,\r\n    cityList: [],\r\n    city: null,\r\n    trackingCities: initialCityList,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    console.log(action.type);\r\n    switch (action.type) {\r\n        case 'FETCH_CITY_LIST_REQUEST':\r\n            return {\r\n                ...state,\r\n                cityList: [],\r\n                isLoading: true,\r\n                error: null,\r\n            };\r\n        case 'FETCH_CITY_LIST_SUCCESS':\r\n            return {\r\n                ...state,\r\n                cityList: action.payload,\r\n                isLoading: false,\r\n                error: null,\r\n            };\r\n        case 'FETCH_BOOK_LIST_FAILURE':\r\n            return {\r\n                ...state,\r\n                cityList: [],\r\n                isLoading: false,\r\n                error: action.payload,\r\n            };\r\n        case 'OPEN_MODAL_CITY':\r\n            return {\r\n                ...state,\r\n                isModalOpened: true,\r\n                city: action.payload,\r\n            };\r\n        case 'CLOSE_MODAL_CITY':\r\n            return {\r\n                ...state,\r\n                isModalOpened: false,\r\n            };\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","const initialCityList = [524901,578072,5128638];\r\nexport default initialCityList;","import { createStore } from 'redux';\r\nimport reducer from './reducers/reducer'\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst Spinner = () => <Box py={10} align=\"center\"><CircularProgress/></Box>;\r\nexport default Spinner;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst ErrorElement = (props) => {\r\n    return (\r\n        <Box align=\"center\">\r\n            {`Ошибка: ${props.error}`}\r\n        </Box>\r\n    );\r\n}\r\nexport default ErrorElement;","export default function toCelsius(kelvin) {\r\n    return Math.round(+kelvin - 273.15);\r\n}","export default function weatherIcon(id) {\r\n    return `http://openweathermap.org/img/wn/${id}@2x.png`;\r\n}","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport toCelsius from '../../utils/toCelsius';\r\nimport weatherIcon from '../../utils/weatherIcon';\r\n\r\nconst CityListItem = (props) => {\r\n    const { city } = props;\r\n    return (\r\n        <ListItem title=\"Подробнее\" key={`city${city.name}`} button onClick={props.clickHandler}>\r\n            <ListItemIcon>\r\n                <img src={weatherIcon(city.weather[0].icon)} alt={city.name} />\r\n            </ListItemIcon>\r\n            <ListItemText primary={`${city.name}`} secondary={`${toCelsius(city.main.temp)}°C`} />\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default CityListItem;","import React from 'react';\r\nimport { connect as connectWithStore } from 'react-redux';\r\nimport List from '@material-ui/core/List';\r\nimport { openModalCity } from '../../actions/actions';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport ErrorElement from '../ErrorElement/ErrorElement';\r\nimport CityListItem from '../CityListItem/CityListItem';\r\n\r\nconst CityList = (props) => {\r\n    const onClickHandler = (city) => () => {\r\n        props.openModalCity(city);\r\n    }\r\n\r\n    let Content;\r\n    if (props.state.isLoading) {\r\n        Content = () => <Spinner/>;\r\n    } else if (props.state.error) {\r\n        Content = () => <ErrorElement error={props.state.error}/>;\r\n    } else {\r\n        const { cityList } = props.state;\r\n        Content = () => (\r\n            <List  component=\"nav\" aria-label=\"main mailbox folders\">\r\n                {cityList.map(city =>\r\n                    <CityListItem\r\n                        key={`city${city.name}`}\r\n                        clickHandler={onClickHandler(city)}\r\n                        city={city}\r\n                    />\r\n                )}\r\n            </List>\r\n        );\r\n    }\r\n\r\n    return <Content/>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    openModalCity,\r\n};\r\n\r\nexport default connectWithStore(mapStateToProps, mapDispatchToProps)(CityList);","const fetchBookListRequest = () => {\r\n    return {\r\n        type: \"FETCH_CITY_LIST_REQUEST\",\r\n    }\r\n};\r\nconst fetchBookListSuccess = (data) => {\r\n    return {\r\n        type: \"FETCH_CITY_LIST_SUCCESS\",\r\n        payload: data,\r\n    }\r\n};\r\nconst fetchBookListFailure = (error) => {\r\n    return {\r\n        type: \"FETCH_CITY_LIST_FAILURE\",\r\n        payload: error,\r\n    }\r\n};\r\n\r\nconst openModalCity = (data) => {\r\n    return {\r\n        type: \"OPEN_MODAL_CITY\",\r\n        payload: data,\r\n    }\r\n}\r\nconst closeModalCity = () => {\r\n    return {\r\n        type: \"CLOSE_MODAL_CITY\",\r\n    }\r\n}\r\n\r\nexport {\r\n    fetchBookListRequest,\r\n    fetchBookListSuccess,\r\n    fetchBookListFailure,\r\n    openModalCity,\r\n    closeModalCity,\r\n};","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport weatherIcon from '../../utils/weatherIcon';\r\nimport toCelsius from '../../utils/toCelsius';\r\nimport toMRS from '../../utils/toMRS';\r\n\r\nconst CityCard = (props) => {\r\n    const { city, onCloseHandler } = props;\r\n    return !city ? <p>Выберите город</p> : (\r\n        <Container maxWidth=\"xs\" disableGutters>\r\n            <Card >\r\n                <Box width=\"100px\" mx=\"auto\">\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        image={weatherIcon(city.weather[0].icon)}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                </Box>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {city.name}\r\n                    </Typography>\r\n                    <Typography variant=\"body1\" component=\"p\">\r\n                        {toCelsius(city.main.temp)}°C (ощущается как {toCelsius(city.main.feels_like)}°C)\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {city.weather[0].description[0].toUpperCase() + city.weather[0].description.substring(1)}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Ветер {city.wind.speed} м/с\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Давление {toMRS(city.main.pressure)} мрс\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button onClick={onCloseHandler} size=\"small\" color=\"primary\">\r\n                        Закрыть\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default CityCard;","export default function toMRS(hPa) {\r\n    return Math.round(+hPa / 1.33);\r\n}","import React from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { connect as connectWithStore } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { closeModalCity } from '../../actions/actions';\r\nimport CityCard from '../CityCard/CityCard';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    modal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    }\r\n}));\r\n\r\nconst ModalCityCard = (props) => {\r\n    const { isModalOpened, city } = props;\r\n    const onCloseHandler = () => {\r\n        props.closeModalCity();\r\n    }\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Modal className={classes.modal} open={isModalOpened} onClose={onCloseHandler}>\r\n            <div>\r\n                <CityCard city={city} onCloseHandler={onCloseHandler}/>\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isModalOpened: state.isModalOpened,\r\n        city: state.city,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    closeModalCity,\r\n};\r\n\r\nexport default connectWithStore(mapStateToProps, mapDispatchToProps)(ModalCityCard);","import React from 'react';\r\n\r\nconst ServiceContext = React.createContext();\r\n\r\nexport default ServiceContext;","import React from 'react';\r\nimport ErrorElement from '../ErrorElement/ErrorElement'\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: error };\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ? \r\n        <ErrorElement error={this.state.hasError} /> :\r\n        this.props.children;\r\n    }\r\n}\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { connect as connectWithStore } from 'react-redux';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport CityList from '../CityList/CityList';\r\nimport ModalCityCard from '../ModalCityCard/ModalCityCard';\r\nimport Container from '@material-ui/core/Container';\r\nimport {\r\n    fetchBookListRequest,\r\n    fetchBookListSuccess,\r\n    fetchBookListFailure,\r\n} from '../../actions/actions';\r\nimport ServiceContext from '../ServiceContext/ServiceContext';\r\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\r\n\r\nconst MainPage = (props) => {\r\n    const weatherService = useContext(ServiceContext);\r\n    const {\r\n        fetchBookListRequest,\r\n        fetchBookListSuccess,\r\n        fetchBookListFailure,\r\n        trackingCities, \r\n    } = props;\r\n\r\n    useEffect(() => {\r\n        fetchBookListRequest();\r\n        weatherService.getData(trackingCities)\r\n            .then(data => fetchBookListSuccess(data))\r\n            .catch(err => fetchBookListFailure(err))\r\n    }, [\r\n        fetchBookListRequest,\r\n        fetchBookListSuccess,\r\n        fetchBookListFailure,\r\n        trackingCities,\r\n        weatherService\r\n    ]);\r\n\r\n    return (\r\n        <Container my={20} maxWidth=\"xs\">\r\n            <Paper>\r\n                <Box py={5}>\r\n                    <Typography align=\"center\" variant=\"h4\">Погода на сегодня</Typography>\r\n                </Box>\r\n                <ErrorBoundary>\r\n                    <CityList />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <ModalCityCard />\r\n                </ErrorBoundary>\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        trackingCities: state.trackingCities,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchBookListRequest,\r\n    fetchBookListSuccess,\r\n    fetchBookListFailure,\r\n};\r\n\r\nexport default connectWithStore(mapStateToProps, mapDispatchToProps)(MainPage);","import React from 'react';\r\nimport MainPage from '../MainPage/MainPage';\r\n\r\nconst App = () => <MainPage />;\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as StoreProvider } from 'react-redux';\n\nimport store from './store';\nimport App from './components/App/App';\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary';\nimport ServiceContext from './components/ServiceContext/ServiceContext';\nimport WeatherService from './api/WeatherService';\n\nconst weatherService = new WeatherService();\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <ErrorBoundary>\n      <ServiceContext.Provider value={weatherService}>\n        <App />\n      </ServiceContext.Provider>\n    </ErrorBoundary>\n  </StoreProvider>,\n  document.getElementById('root')\n);\n","import apiKey from \"../constants/apiKey\";\r\n\r\nexport default class WeaterService {\r\n    constructor() {\r\n        this.url = \"https://api.openweathermap.org/data/2.5/weather?\";\r\n        this.apiKey = apiKey;\r\n        this.lang = \"ru\";\r\n    }\r\n\r\n    _getCity(id) {\r\n        const adress = `${this.url}id=${id}&appid=${this.apiKey}&lang=${this.lang}`\r\n        return fetch(adress)\r\n            .then(res => !res.ok ? new Error (res.status) : res.json())\r\n    }\r\n\r\n    getData = (idArray) => {\r\n        /* Приходится делать несколько запросов,\r\n        т.к. у API при отправлении одним запросом не срабатывает русский язык */\r\n        const resArray = idArray.map(id => this._getCity(id));\r\n        return Promise.all(resArray)\r\n    }\r\n}","const apiKey = process.env.REACT_APP_API_KEY;\r\nexport default apiKey;"],"sourceRoot":""}