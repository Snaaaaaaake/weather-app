{"version":3,"sources":["reducers/updateCityListState.js","reducers/updateModalState.js","reducers/updateCityWeeklyWeatherState.js","reducers/reducer.js","constants/initialCityList.js","store.js","components/ServiceContext/ServiceContext.js","components/Spinner/Spinner.js","components/ErrorElement/ErrorElement.js","utils/toCelsius.js","utils/weatherIcon.js","components/CityListItem/CityListItem.js","components/CityList/CityList.js","actions/actions.js","utils/dateFormatter.js","components/CityCard/CityCard.js","utils/toMRS.js","components/ModalCityCard/ModalCityCard.js","components/ErrorBoundary/ErrorBoundary.js","components/MainPage/MainPage.js","components/App/App.js","index.js","api/WeatherService.js","constants/apiKey.js"],"names":["updateCityListState","state","action","type","cityList","isLoading","error","payload","updateModalState","isModalOpened","cityCurrentWeather","updateCityWeeklyWeatherState","cityWeeklyWeather","initialState","trackingCities","cityListState","modalState","cityWeeklyWeatherState","reducer","console","log","store","createStore","ServiceContext","React","createContext","Spinner","Box","py","width","align","CircularProgress","ErrorElement","props","toCelsius","kelvin","Math","round","weatherIcon","id","CityListItem","city","ListItem","title","key","name","button","onClick","clickHandler","ListItemIcon","src","weather","icon","alt","ListItemText","primary","secondary","main","temp","mapDispatchToProps","openModalCity","data","fetchCityListRequest","fetchCityListSuccess","fetchCityListFailure","connectWithStore","weatherService","useContext","useEffect","getCurrentWeather","then","catch","err","Content","onClickHandler","List","component","aria-label","map","addZero","date","dateFormatter","rawDate","getDate","getMonth","getFullYear","WeeklyWeatherBlock","day","index","Date","dt","mr","mt","Typography","variant","color","night","description","toUpperCase","substring","display","gridTemplateColumns","fetchWeeklyWeatherListRequest","fetchWeeklyWeatherListSuccess","fetchWeeklyWeatherListFailure","hPa","onCloseHandler","coord","lat","lon","hours","getHours","getWeeklyWeather","daily","Container","maxWidth","disableGutters","Card","mx","CardMedia","image","CardContent","gutterBottom","feels_like","wind","speed","pressure","CardActions","Button","size","useStyles","makeStyles","modal","alignItems","justifyContent","overflowY","closeModalCity","classes","Modal","className","open","onClose","ErrorBoundary","hasError","this","children","Component","MainPage","my","App","_getData","adress","url","apiKey","lang","fetch","res","ok","json","Error","status","idArray","resArray","Promise","all","process","ReactDOM","render","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.0be03499.chunk.js","sourcesContent":["export default function updateCityListState(state, action) {\r\n    switch(action.type) {\r\n        case 'FETCH_CITY_LIST_REQUEST':\r\n            return {\r\n                cityList: [],\r\n                isLoading: true,\r\n                error: null,\r\n            }\r\n        case 'FETCH_CITY_LIST_SUCCESS':\r\n            return {\r\n                cityList: action.payload,\r\n                isLoading: false,\r\n                error: null,\r\n            }\r\n        case 'FETCH_CITY_LIST_FAILURE':\r\n            return {\r\n                cityList: [],\r\n                isLoading: false,\r\n                error: action.payload,\r\n            }\r\n        default: return state;\r\n    }\r\n}","export default function updateModalState(state, action) {\r\n    switch (action.type) {\r\n        case 'OPEN_MODAL_CITY':\r\n            return {\r\n                isModalOpened: true,\r\n                cityCurrentWeather: action.payload,\r\n            };\r\n        case 'CLOSE_MODAL_CITY':\r\n            return {\r\n                isModalOpened: false,\r\n                cityCurrentWeather: null,\r\n            };\r\n        default: return state;\r\n    }\r\n} ","export default function updateCityWeeklyWeatherState(state, action) {\r\n    switch(action.type) {\r\n        case 'FETCH_WEEKLY_WEATHER_LIST_REQUEST':\r\n            return {\r\n                cityWeeklyWeather: null,\r\n                isLoading: true,\r\n                error: null,\r\n            }\r\n        case 'FETCH_WEEKLY_WEATHER_LIST_SUCCESS':\r\n            return {\r\n                cityWeeklyWeather: action.payload,\r\n                isLoading: false,\r\n                error: null,\r\n            }\r\n        case 'FETCH_WEEKLY_WEATHER_LIST_FAILURE':\r\n            return {\r\n                cityWeeklyWeather: null,\r\n                isLoading: false,\r\n                error: action.payload,\r\n            }\r\n        default: return state;\r\n    }\r\n}","import initialCityList from '../constants/initialCityList';\r\nimport updateCityListState from './updateCityListState';\r\nimport updateModalState from './updateModalState';\r\nimport updateCityWeeklyWeatherState from './updateCityWeeklyWeatherState';\r\n\r\nconst initialState = {\r\n    trackingCities: initialCityList,\r\n    cityListState: {\r\n        cityList: [],\r\n        error: null,\r\n        isLoading: true,\r\n    },\r\n    modalState: {\r\n        isModalOpened: false,\r\n        cityCurrentWeather: null,\r\n    },\r\n    cityWeeklyWeatherState: {\r\n        cityWeeklyWeather: null,\r\n        error: null,\r\n        isLoading: true,\r\n    },\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    console.log(action.type);\r\n    return {\r\n        ...state,\r\n        cityListState: updateCityListState(state.cityListState, action),\r\n        modalState: updateModalState(state.modalState, action),\r\n        cityWeeklyWeatherState: updateCityWeeklyWeatherState(state.cityWeeklyWeatherState, action),\r\n    }\r\n}\r\n\r\nexport default reducer;","const initialCityList = [524901,578072,5128638];\r\nexport default initialCityList;","import { createStore } from 'redux';\r\nimport reducer from './reducers/reducer'\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst ServiceContext = React.createContext();\r\n\r\nexport default ServiceContext;","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst Spinner = () => <Box py={5} width=\"300px\" align=\"center\"><CircularProgress/></Box>;\r\nexport default Spinner;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst ErrorElement = (props) => {\r\n    return (\r\n        <Box align=\"center\">\r\n            {`Ошибка: ${props.error}`}\r\n        </Box>\r\n    );\r\n}\r\nexport default ErrorElement;","export default function toCelsius(kelvin) {\r\n    return Math.round(+kelvin - 273.15);\r\n}","export default function weatherIcon(id) {\r\n    return `http://openweathermap.org/img/wn/${id}@2x.png`;\r\n}","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport toCelsius from '../../utils/toCelsius';\r\nimport weatherIcon from '../../utils/weatherIcon';\r\n\r\nconst CityListItem = (props) => {\r\n    const { city } = props;\r\n    return (\r\n        <ListItem title=\"Подробнее\" key={`city${city.name}`} button onClick={props.clickHandler}>\r\n            <ListItemIcon>\r\n                <img src={weatherIcon(city.weather[0].icon)} alt={city.name} />\r\n            </ListItemIcon>\r\n            <ListItemText primary={`${city.name}`} secondary={`${toCelsius(city.main.temp)}°C`} />\r\n        </ListItem>\r\n    );\r\n};\r\n\r\nexport default CityListItem;","import React, { useContext, useEffect } from 'react';\r\nimport { connect as connectWithStore } from 'react-redux';\r\nimport List from '@material-ui/core/List';\r\nimport {\r\n    openModalCity,\r\n    fetchCityListRequest,\r\n    fetchCityListSuccess,\r\n    fetchCityListFailure,\r\n} from '../../actions/actions';\r\nimport ServiceContext from '../ServiceContext/ServiceContext';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport ErrorElement from '../ErrorElement/ErrorElement';\r\nimport CityListItem from '../CityListItem/CityListItem';\r\n\r\nconst CityList = (props) => {\r\n    const weatherService = useContext(ServiceContext);\r\n    const {\r\n        fetchCityListRequest,\r\n        fetchCityListSuccess,\r\n        fetchCityListFailure,\r\n        trackingCities,\r\n        openModalCity,\r\n        cityListState,\r\n    } = props;\r\n    const { cityList, isLoading, error } = cityListState;\r\n\r\n    useEffect(() => {\r\n        fetchCityListRequest();\r\n        weatherService.getCurrentWeather(trackingCities)\r\n            .then(data => fetchCityListSuccess(data))\r\n            .catch(err => fetchCityListFailure(err))\r\n    }, [\r\n        fetchCityListRequest,\r\n        fetchCityListSuccess,\r\n        fetchCityListFailure,\r\n        trackingCities,\r\n        weatherService\r\n    ]);\r\n\r\n    const onClickHandler = (city) => () => {\r\n        openModalCity(city);\r\n    }\r\n\r\n    let Content;\r\n    if (isLoading) {\r\n        Content = () => <Spinner/>;\r\n    } else if (error) {\r\n        Content = () => <ErrorElement error={error}/>;\r\n    } else {\r\n        Content = () => (\r\n            <List  component=\"nav\" aria-label=\"main mailbox folders\">\r\n                {cityList.map(city =>\r\n                    <CityListItem\r\n                        key={`city${city.name}`}\r\n                        clickHandler={onClickHandler(city)}\r\n                        city={city}\r\n                    />\r\n                )}\r\n            </List>\r\n        );\r\n    }\r\n    return <Content/>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        trackingCities: state.trackingCities,\r\n        cityListState: state.cityListState\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    openModalCity,\r\n    fetchCityListRequest,\r\n    fetchCityListSuccess,\r\n    fetchCityListFailure,\r\n};\r\n\r\nexport default connectWithStore(mapStateToProps, mapDispatchToProps)(CityList);","const fetchCityListRequest = () => {\r\n    return {\r\n        type: \"FETCH_CITY_LIST_REQUEST\",\r\n    }\r\n};\r\nconst fetchCityListSuccess = (data) => {\r\n    return {\r\n        type: \"FETCH_CITY_LIST_SUCCESS\",\r\n        payload: data,\r\n    }\r\n};\r\nconst fetchCityListFailure = (data) => {\r\n    return {\r\n        type: \"FETCH_CITY_LIST_FAILURE\",\r\n        payload: data,\r\n    }\r\n};\r\n\r\nconst openModalCity = (data) => {\r\n    return {\r\n        type: \"OPEN_MODAL_CITY\",\r\n        payload: data,\r\n    }\r\n}\r\nconst closeModalCity = () => {\r\n    return {\r\n        type: \"CLOSE_MODAL_CITY\",\r\n    }\r\n}\r\n\r\nconst fetchWeeklyWeatherListRequest = () => {\r\n    return {\r\n        type: \"FETCH_WEEKLY_WEATHER_LIST_REQUEST\",\r\n    }\r\n};\r\nconst fetchWeeklyWeatherListSuccess = (data) => {\r\n    return {\r\n        type: \"FETCH_WEEKLY_WEATHER_LIST_SUCCESS\",\r\n        payload: data,\r\n    }\r\n};\r\nconst fetchWeeklyWeatherListFailure = (data) => {\r\n    return {\r\n        type: \"FETCH_WEEKLY_WEATHER_LIST_FAILURE\",\r\n        payload: data,\r\n    }\r\n};\r\n\r\nexport {\r\n    fetchCityListRequest,\r\n    fetchCityListSuccess,\r\n    fetchCityListFailure,\r\n    openModalCity,\r\n    closeModalCity,\r\n    fetchWeeklyWeatherListRequest,\r\n    fetchWeeklyWeatherListSuccess,\r\n    fetchWeeklyWeatherListFailure,\r\n};","function addZero (date) {\r\n    return date < 10 ? `0${date}` : date;\r\n}\r\n\r\nexport default function dateFormatter (rawDate) {\r\n    return `${addZero(rawDate.getDate())}.${addZero(rawDate.getMonth() + 1)}.${rawDate.getFullYear()}`;\r\n}","import React, { useEffect, useContext } from 'react';\r\nimport { connect as connectWithStore } from 'react-redux';\r\n\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport ServiceContext from '../ServiceContext/ServiceContext';\r\nimport ErrorElement from '../ErrorElement/ErrorElement';\r\nimport {\r\n    fetchWeeklyWeatherListRequest,\r\n    fetchWeeklyWeatherListSuccess,\r\n    fetchWeeklyWeatherListFailure,\r\n} from '../../actions/actions';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport weatherIcon from '../../utils/weatherIcon';\r\nimport toCelsius from '../../utils/toCelsius';\r\nimport toMRS from '../../utils/toMRS';\r\nimport dateFormatter from '../../utils/dateFormatter';\r\n\r\nconst CityCard = (props) => {\r\n    const weatherService = useContext(ServiceContext);\r\n    const {\r\n        onCloseHandler,\r\n        cityWeeklyWeatherState,\r\n        cityCurrentWeather,\r\n        fetchWeeklyWeatherListRequest,\r\n        fetchWeeklyWeatherListSuccess,\r\n        fetchWeeklyWeatherListFailure,\r\n    } = props;\r\n    const { cityWeeklyWeather } = cityWeeklyWeatherState;\r\n    const { lat, lon } = cityCurrentWeather.coord;\r\n    const rawDate = new Date(cityCurrentWeather.dt * 1000);\r\n    const date = dateFormatter(rawDate);\r\n    const hours = rawDate.getHours();\r\n\r\n    useEffect(() => {\r\n        fetchWeeklyWeatherListRequest();\r\n        weatherService.getWeeklyWeather(lat, lon)\r\n            .then(data => fetchWeeklyWeatherListSuccess(data.daily))\r\n            .catch(err => fetchWeeklyWeatherListFailure(err))\r\n    }, [\r\n        weatherService,\r\n        lat,\r\n        lon,\r\n        fetchWeeklyWeatherListRequest,\r\n        fetchWeeklyWeatherListSuccess,\r\n        fetchWeeklyWeatherListFailure,\r\n    ]);\r\n\r\n    return !cityCurrentWeather ? <p>Выберите город</p> : (\r\n        <Container maxWidth=\"xs\" disableGutters>\r\n            <Card >\r\n                <Box width=\"100px\" mx=\"auto\">\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        image={weatherIcon(cityCurrentWeather.weather[0].icon)}\r\n                    />\r\n                </Box>\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Сегодня, {date}:\r\n                    </Typography>\r\n                    <Typography gutterBottom variant=\"h4\" component=\"h2\">\r\n                        {cityCurrentWeather.name}\r\n                    </Typography>\r\n                    \r\n                    <Typography variant=\"body1\" component=\"p\">\r\n                         {toCelsius(cityCurrentWeather.main.temp)}°C \r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Ощущается как {toCelsius(cityCurrentWeather.main.feels_like)}°C\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {cityCurrentWeather.weather[0].description[0].toUpperCase() + cityCurrentWeather.weather[0].description.substring(1)}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Ветер {cityCurrentWeather.wind.speed} м/с\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        Давление {toMRS(cityCurrentWeather.main.pressure)} мрс\r\n                    </Typography>\r\n                    {\r\n                        (cityWeeklyWeather && hours > 6) &&\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Температура ночью: {toCelsius(cityWeeklyWeather[0].temp.night)}°C\r\n                        </Typography>\r\n                    }\r\n                    <WeeklyWeatherBlock cityWeeklyWeatherState={cityWeeklyWeatherState} />\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button onClick={onCloseHandler} size=\"small\" color=\"primary\">\r\n                        Закрыть\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Container>\r\n    )\r\n};\r\n\r\nconst WeeklyWeatherBlock = (props) => {\r\n    const { cityWeeklyWeather, isLoading, error } = props.cityWeeklyWeatherState;\r\n    let Content;\r\n    if (isLoading) {\r\n        Content = () => <Spinner/>;\r\n    } else if (error) {\r\n        Content = () => <ErrorElement error={error}/>;\r\n    } else {\r\n        Content = () => cityWeeklyWeather.map((day, index) => \r\n            {\r\n                const rawDate = new Date(day.dt * 1000);\r\n                const date = dateFormatter(rawDate);\r\n                return index !== 0 && (\r\n                    <Box key={`day_${index}`} mr=\"10px\" mt=\"13px\">\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {date}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {`Днём: ${toCelsius(day.temp.day)}°C`}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {`Ночью: ${toCelsius(day.temp.night)}°C`}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            {day.weather[0].description[0].toUpperCase() + day.weather[0].description.substring(1)}\r\n                        </Typography>\r\n                    </Box>\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Box mt=\"15px\">\r\n            <Typography variant=\"body1\" component=\"p\">\r\n                В ближайшие дни:\r\n            </Typography>\r\n            <Box\r\n                display=\"grid\"\r\n                gridTemplateColumns=\"auto auto\"\r\n            >\r\n                <Content/>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { \r\n        cityWeeklyWeatherState: state.cityWeeklyWeatherState,\r\n        cityCurrentWeather: state.modalState.cityCurrentWeather,\r\n     }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    fetchWeeklyWeatherListRequest,\r\n    fetchWeeklyWeatherListSuccess,\r\n    fetchWeeklyWeatherListFailure,\r\n};\r\n\r\nexport default connectWithStore(mapStateToProps, mapDispatchToProps)(CityCard);","export default function toMRS(hPa) {\r\n    return Math.round(+hPa / 1.33);\r\n}","import React from 'react';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { connect as connectWithStore } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { closeModalCity, } from '../../actions/actions';\r\nimport CityCard from '../CityCard/CityCard';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    modal: {\r\n        display: 'grid',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        overflowY:'auto',\r\n    }\r\n}));\r\n\r\nconst ModalCityCard = (props) => {\r\n    const { isModalOpened } = props;\r\n    const classes = useStyles();\r\n\r\n    const onCloseHandler = () => {\r\n        props.closeModalCity();\r\n    }\r\n\r\n    return (\r\n        <Modal className={classes.modal} open={isModalOpened} onClose={onCloseHandler}>\r\n            <div>\r\n                <CityCard onCloseHandler={onCloseHandler} />\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isModalOpened: state.modalState.isModalOpened\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = { closeModalCity };\r\n\r\nexport default connectWithStore(mapStateToProps, mapDispatchToProps)(ModalCityCard);","import React from 'react';\r\nimport ErrorElement from '../ErrorElement/ErrorElement'\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: error };\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ? \r\n        <ErrorElement error={this.state.hasError} /> :\r\n        this.props.children;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport CityList from '../CityList/CityList';\r\nimport ModalCityCard from '../ModalCityCard/ModalCityCard';\r\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\r\n\r\nconst MainPage = () => \r\n    <Container my={20} maxWidth=\"xs\">\r\n        <Box py={5}>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n                Погода на сегодня\r\n            </Typography>\r\n        </Box>\r\n        <ErrorBoundary>\r\n            <CityList />\r\n        </ErrorBoundary>\r\n        <ErrorBoundary>\r\n            <ModalCityCard />\r\n        </ErrorBoundary>\r\n    </Container>\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport MainPage from '../MainPage/MainPage';\r\n\r\nconst App = () => <MainPage />;\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as StoreProvider } from 'react-redux';\n\nimport store from './store';\nimport App from './components/App/App';\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary';\nimport ServiceContext from './components/ServiceContext/ServiceContext';\nimport WeatherService from './api/WeatherService';\n\nconst weatherService = new WeatherService();\n\nReactDOM.render(\n  <StoreProvider store={store}>\n    <ErrorBoundary>\n      <ServiceContext.Provider value={weatherService}>\n        <App />\n      </ServiceContext.Provider>\n    </ErrorBoundary>\n  </StoreProvider>,\n  document.getElementById('root')\n);\n","import apiKey from \"../constants/apiKey\";\r\n\r\nexport default class WeaterService {\r\n    constructor() {\r\n        this.url = \"https://api.openweathermap.org/data/2.5/\";\r\n        this.apiKey = apiKey;\r\n        this.lang = \"ru\";\r\n    }\r\n    _getData = (id) => {\r\n        const callType = \"weather\";\r\n        const adress = `${this.url}${callType}?id=${id}&appid=${this.apiKey}&lang=${this.lang}`;\r\n        return fetch(adress)\r\n            .then(res => !res.ok ? new Error (res.status) : res.json())\r\n    }\r\n    getCurrentWeather = (idArray) => {\r\n        /* При получении списка городов риходится делать несколько одиночных запросов,\r\n        т.к. у API при отправлении одним запросом не срабатывает русский язык */\r\n        const resArray = idArray.map(id => this._getData(id));\r\n        return Promise.all(resArray)\r\n    }\r\n    getWeeklyWeather = (lat, lon) => {\r\n        // На неделю бесплатно данные можно получать только по координатам\r\n        const callType = \"onecall\";\r\n        const exclude = \"current,minutely,hourly\";\r\n        const adress = `${this.url}${callType}?lat=${lat}&lon=${lon}&exclude=${exclude}&appid=${this.apiKey}&lang=${this.lang}`;\r\n        return fetch(adress)\r\n            .then(res => !res.ok ? new Error (res.status) : res.json())\r\n    }\r\n}","const apiKey = process.env.REACT_APP_API_KEY;\r\nexport default apiKey;"],"sourceRoot":""}